////////////////////////////////////////////////////////////////////////////////
Copyright (c) 2012, THE BOARD OF TRUSTEES OF THE LELAND STANFORD JUNIOR UNIVERSITY
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

   Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
   Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
   Neither the name of the STANFORD UNIVERSITY nor the names of its contributors
   may be used to endorse or promote products derived from this software without
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
////////////////////////////////////////////////////////////////////////////////

= Service Capability Contract: transform
:toc:

== Document Version
1.0

== Intent
The intent of this document is to provide a contract for consumer reference on use of this capability

== Name
transform

== Description
This capability will provide XSL transformation functionality to the XML input provided

== State Management
This service capability is stateless in nature, however, the XSL template requested is placed in a LRU Cache. The size is configurable per installation.

== Owner
TBD

== Interface

=== Interface Classification
* STROMA
* synchronous
* HTTP

=== Expected Input

.Special URI rules

* N/A

.Parameters

* *xsl*
	** required
	** The path to the XSL file. This can be a file path or an HTTP URL. If this is a relative path, it will be resolved with respect to the WEB-INF directory of the Cyclades installation
	** The resulting XSL template will be placed in a LRU Cache whose size can be configured
* *xsl-parameter-names*
	** optional
	** If set to a comma separated list of names, the service will check each name for a value in the parameters of the incoming request.  If a value is found, the first one will be used to set an XSL transformer property with the given name.
* *serialize*
	** optional
	** If set to "true" during a chained orchestration and the service invocation chains forward, this capability will _not_ use the MapChannel (which it uses by default for performance reasons) and will alternatively serialize the output.

.Meta Data

N/A

[NOTE]
The following are trivial examples to use as a reference. Please see STROMA/X-STROMA specification for details.

==== XML request variations
----
http://localhost:8080/cycladesengine/xsl?action=transform&data-type=xml&xsl=/Users/tangel/xsl_samples/sample3.xsl&xsl-parameter-names=a,b,c&a=1&b=2&c=3&data=<r><name>tomtom</name></r>
----

.sample3.xsl
----
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="xml"/>
	<xsl:template match="/">
		<xsl:apply-templates />
	</xsl:template>
	<xsl:template match="name">
   		<name><xsl:apply-templates />+</name>
	</xsl:template>
</xsl:stylesheet>
----

==== JSON request variations
----
N/A
----

=== Expected Output

==== XML
----
<response service="xsl" action="transform" error-code="0"><name>tomtom+</name></response>
----

==== JSON
----
TBD
----

== Additional Orchestration Capability Details

* Supports Chained Orchestration
	** Any XML input can be utilized
	** An in memory DOM can be passed via the MapChannel
		*** key: "dom"
		*** value: The root Node object of the DOM
	** When chaining forward an in memory DOM will be dispatched to the consuming service as the preferred method for performance (via the MapChannel with the key "dom") unless the parameter "serialize" is set to "true", which will force the output to be serialized out and clear the MapChannel.
	** Incoming data can either be serialized or dispatched over the MapChannel with the "dom" key. If the "dom" key exists in the MapChannel, the MapChannel data will be assumed as the intended input, otherwise serialized input will be used.

== Additional Notes

=== XML transactions only at this time.
We *may* support JSON requests/responses at a later date.

=== Configuration
* The LRU Cache size can be set by including the property "LRUCacheSize" in the xsl.properties file.
	** Example entry: LRUCacheSize=20

== Functional Requirements

* The capability will provide general and reusable XSL functionality.

== Non Functional Requirements

* SLA/QoS
 - N/A

* Security
 - N/A

== Test Results

* link:load_test_results.html[Load Test Results]
* link:extended_duration_test_results.html[Extended Duration Test Results]
* link:functional_test_results.html[Functional Test Results]

== Modifications To This Document

[options="header"]
|=========================================================
|Author			|Date		|Version	|Details
|Tom Angelopoulos	|3/23/2012	|1.0		|Document Creation
|=========================================================
